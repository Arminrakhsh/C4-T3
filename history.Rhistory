library(readr)
trainingData <- read_csv("C:/Users/armin/OneDrive/Desktop/Data Analytics/UJIndoorLoc/UJIndoorLoc/trainingData.csv")
View(trainingData)
summary(trainingData)
View(trainingData)
View(trainingData)
View(trainingData)
View(trainingData)
View(trainingData)
View(trainingData)
View(trainingData)
View(trainingData)
# Combine
Str(trainingData)
# Combine
library(caret)
str(trainingData)
library(tidyr)
tdata<-unite(trainingData,FLOOR,BUILDINGID,SPACEID,RELATIVEPOSITION)
str(tdata)
str(tdata)
View(tdata)
View(tdata)
tdata<-unite(trainingData,FLOOR,BUILDINGID,SPACEID,RELATIVEPOSITION,sep = "")
str(tdata)
summary(tdata)
View(tdata)
View(tdata)
tdata<-unite(trainingData,ID,FLOOR,BUILDINGID,SPACEID,RELATIVEPOSITION,sep = "")
str(tdata)
summary(tdata)
View(tdata)
View(tdata)
View(tdata)
View(tdata)
#Remove LONGITUE,LATITUDE,USERID,PHONEID AND TIMESTAMP
tdata<-tdata[ , -which(names(tdata) %n% c("LONGITUDE","LATITUDE","USERID","PHONEID","TIMESTAMP"))]
#Remove LONGITUE,LATITUDE,USERID,PHONEID AND TIMESTAMP
tdata<-tdata[ , -which(names(tdata) %in% c("LONGITUDE","LATITUDE","USERID","PHONEID","TIMESTAMP"))]
str(tdata)
View(tdata)
View(tdata)
#Change the data type
tdata$ID<-as.numeric(tdata$ID)
#Replacing 100s with -105
tdata[tdata==100]<- -105
str(tdata)
savehistory("~/C4-T3/History.Rhistory")
svmFit
svmFit1
rfFit1
library(caret)
library(e1071)
library(dplyr)
library(C50)
library(e1071)
install.packages("lm")
str(trainingData)
library(tidyr)
library(summarytools)
#Choosing Building 0
tdata<-filter(trainingData,BUILDINGID == 0)
summary(tdata)
str(tdata)
tdata<-unite(trainingData,ID,FLOOR,BUILDINGID,SPACEID,RELATIVEPOSITION,sep = " ")
str(tdata)
summary(tdata)
#Remove LONGITUE,LATITUDE,USERID,PHONEID AND TIMESTAMP
tdata<-tdata[ , -which(names(tdata) %in% c("LONGITUDE","LATITUDE","USERID","PHONEID","TIMESTAMP"))]
str(tdata)
#Change the data type
tdata$ID<-as.factor(tdata$ID)
#Replacing 100s with -105
tdata[tdata==100]<- -105
str(tdata)
plot(tdata)
#Remove Columns
remove_cols <- nearZeroVar(tdata,freqCut = 300,uniqueCut = 0.3,names = TRUE)
#Get all the column names from data: all_cols
all_cols<-names(tdata)
#remove from tdata
nzvtdata<-tdata[,setdiff(all_cols,remove_cols)]
summary(nzvtdata)
#load library and set seed
set.seed(998)
#create a 20% sample of the data
#nzvtdata <- nzvtdata[sample(1:nrow(nzvtdata), 4000,replace=FALSE),]
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(nzvtdata$ID, p = .75, list = FALSE)
training <- nzvtdata[inTraining,]
testing <- nzvtdata[-inTraining,]
#10 fold cross validation
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
rfFit1 <- train(ID~., data = training, method = "rf", trControl=fitControl, tuneLength = 1)
rfFit1
#Choosing Building 0
tdata<-filter(trainingData,BUILDINGID == 0)
tdata<-unite(trainingData,ID,FLOOR,BUILDINGID,SPACEID,RELATIVEPOSITION,sep = " ")
#Choosing Building 0
tdata<-filter(trainingData,BUILDINGID == 0)
tdata<-unite(tdata,ID,FLOOR,BUILDINGID,SPACEID,RELATIVEPOSITION,sep = " ")
#Remove LONGITUE,LATITUDE,USERID,PHONEID AND TIMESTAMP
tdata<-tdata[ , -which(names(tdata) %in% c("LONGITUDE","LATITUDE","USERID","PHONEID","TIMESTAMP"))]
#Change the data type
tdata$ID<-as.factor(tdata$ID)
#Replacing 100s with -105
tdata[tdata==100]<- -105
str(tdata)
#plot(tdata)
#Remove Columns
remove_cols <- nearZeroVar(tdata,freqCut = 300,uniqueCut = 0.3,names = TRUE)
#Get all the column names from data: all_cols
all_cols<-names(tdata)
#remove from tdata
nzvtdata<-tdata[,setdiff(all_cols,remove_cols)]
summary(nzvtdata)
#load library and set seed
set.seed(998)
#create a 20% sample of the data
#nzvtdata <- nzvtdata[sample(1:nrow(nzvtdata), 4000,replace=FALSE),]
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(nzvtdata$ID, p = .75, list = FALSE)
training <- nzvtdata[inTraining,]
testing <- nzvtdata[-inTraining,]
#10 fold cross validation
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
rfFit1 <- train(ID~., data = training, method = "rf", trControl=fitControl, tuneLength = 1)
rfFit1
#train SVM Regression model
svmFit1 <- train(ID~., data = training, method = "svmLinear", trControl=fitControl, tuneLength = 1)
svmFit1
#train C50  model
C50Fit1 <- train(ID~., data = training,method = "c50", trControl=fitControl, tuneLength = 1)
#train C50  model
C50Fit1 <- C5.0(ID~., data = training, trControl=fitControl, tuneLength = 1)
summary(C50Fit1)
ModelData <- resamples(list(RF = rfFit1, SVM = svmFit1, C50 = C50Fit1))
ModelData <- resamples(list(RF = rfFit1, SVM = svmFit1))
summary(ModelData)
#train C50  model
kNNFit1 <- train(ID~., data = training,method = "kNN", trControl=fitControl, tuneLength = 1)
#train C50  model
kNNFit1 <- train(ID~., data = training,method = "knn", trControl=fitControl, tuneLength = 1)
kNNFit1
ModelData <- resamples(list(RF = rfFit1, SVM = svmFit1,kNN = kNNFit1 ))
summary(ModelData)
confusionMatrix(rfFit1,training$ID)
#Predictions on Test set
rfpred<-predict(rfFit1,newdata = testing)
confusionMatrix(rfpred,testing$ID)
svmpred<-predict(svmFit1,newdata = testing)
kNNpred<-predict(kNNFit1,newdata = testing
kNNpred<-predict(kNNFit1,newdata = testing)
#Cofusion Matrix
confusionMatrix(rfpred,testing$ID)
confusionMatrix(svmpred,testing$ID)
confusionMatrix(kNNpred,testing$ID)
kNNpred<-predict(kNNFit1,newdata = testing)
confusionMatrix(kNNpred,testing$ID)
#Cofusion Matrix
plot(confusionMatrix(rfpred,testing$ID))
#Ploting
install.packages("arules")
#Ploting
install.packages("arulesViz")
library(arules)
library(arulesViz)
#Ploting
itemFrequencyPlot(rfpred,topN=10, main="Top 10 Transactions")
#Ploting
itemFrequencyPlot(rfpred,top_n(10), maintainer()="Top 10 Transactions")
#Ploting
itemFrequencyPlot(rfpred,top_n(), maintainer()="Top 10 Transactions")
#Ploting
itemFrequencyPlot(rfpred, main="Top 10 Transactions")
#Ploting
itemFrequencyPlot(rfpred,topN= 10, main="Top 10 Transactions")
#Ploting
rfpred$ID<-as.double(rfpred$ID)
#Ploting
rfpred$ID<-as.double(rfpred$ID)
itemFrequencyPlot(tdata,topN= 10, main="Top 10 Transactions")
itemFrequencyPlot(trainingData,topN= 10, main="Top 10 Transactions")
itemFrequencyPlot(rfpred$ID,topN= 10, main="Top 10 Transactions")
itemFrequencyPlot(training,topN = 10, main="Top 10 Transactions")
itemFrequencyPlot(testing,topN = 10, main="Top 10 Transactions")
rfFit1
#Cofusion Matrix
confusionMatrix(rfpred,testing$ID)
svmFit1
confusionMatrix(svmpred,testing$ID)
confusionMatrix(svmpred,testing$ID)
confusionMatrix(kNNpred,testing$ID)
kNNFit1
summary(ModelData)
savehistory("C:/Users/armin/OneDrive/Desktop/Data Analytics/history.Rhistory")
